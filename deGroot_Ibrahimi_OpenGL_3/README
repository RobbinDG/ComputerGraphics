The changes we made are the following:

Common animation:
 - We implemented a simple scene matching all requirements. Movement is possible using WASD + up and down arrows. WS move forwards and backwards, AD move sideways and up/down upwards and downwards. We achieve this by moving the entire Scene in the inverse direction. This is easily implemented due to techniques described the next bullet point.
 - The code has been transformed to be reusable and properly object oriented for easy scene construction. We created Scene, Mesh, Texture, Animation, AnimatedMesh and various abstract classes. These all are reusable objects. Animations can be reused for multiple objects (not done in this scene). Because of the structure and abstractions of animations and animated meshes, we can nest/stack animations allowing us to apply multiple animations to a single mesh.
 - We implemented 4 animation classes, but more can easily be created.  Specifically, we made:
   + Local coordinate rotation
   + Global coordinate rotation
   + Back and forth movement
   + Bouncing with acceleration and deceleration. 
An animation can be paired with a drawable object in order to animate it easily.
 - The scene object allows for collective access to multiple drawable objects, and exposes methods to modify the entire scene around the global coordinate system. This is how we implement the UI buttons and WASD+up/down buttons.
 - The scene presented is quite simple and more of a tech-demo than anything. This is mainly due to a lack of inspiration and time given the amount of work invested into extending the framework.

Advanced vertex manipulation:
 - We implemented everything that was explained in the assignment. Luckily, we did not encounter any issues with this sub-assignment as everything went fairly smoothly.
 - Moreover, it was unclear whether the implementation for Gouraud shading and Normal mapping should be implemented, so we left it as is given the template code.
 - We disabled the ability to load textures onto the mesh as it was not necessary for this part of the assignment. We left all the code in though in case it is ever needed, but simply commented it out.
 - Similarly, we also left the original code in for the fragment shader to show what we used.
 - We included images in the Screenshot folder for every part of this sub-assignment.
   For 3.1.png we used the following settings:
    - Amplitude = 0.4
    - Frequency = 4.8
    - Time = 1
    - Phi = 0

 - As a bonus, a selector for a droplet shader was added. This follows the function
   f(u,v,t) = A * sin(2pi * f * ((u - cx)^2 + (v - cy)^2) + t + phi)
   where cx and cy are the center coordinates of the mesh. To achieve this, a waveDV function was added, which updates the V coordinate.

Suggestions:
It was a bit unclear from the assignment and TA interaction whether a light source should stay fixed, or get transformed along with the object(s). Maybe this could be improved next year. Moreover, the template code had a GUI bug that resulted in strange controls on machines running macOS. A TA luckily helped me solve this fairly quickly, but it would be nice if this could be fixed from the beginning to prevent confusion. Overall it was a very nice and clear assignment, well done!